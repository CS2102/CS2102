1.  We guarantee a balanced tree by randomly adding the element
	to either the right or left, and then calling rebalance.
	Rebalance checks if the branches' heights are within one of each other.
	If they aren't, it finds the difference and rotates accordingly.
	Should the tree not be properly balanced upon adding a new element,
	the heights returned will not be covered in the cases specified
	and the program will throw an error. 

2.  At every point in the adding and removing of elements,
	it is assumed the tree has a right and left child, even if they are empty.
	We declared an interface IBST, which has a height, getLeft, and getRight method.
	This ensures that every object has methods with the appropriate data.
	However, the empty trees will throw errors if the getLeft and getRight methods are called.
	
3.  We did use isAVL in our testing implementation.
	It was useful to check our balancing code and make sure
	adding and removing elements kept the tree balanced.
	It was basically a test of a test.